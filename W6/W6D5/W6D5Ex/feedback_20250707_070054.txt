URL: https://github.com/IVSpector/DI-Bootcamp/blob/main/W6/W6D5/W6D5Ex/W6D5Ex.sql
suggestions for improvement:
- In Task 1 of Exercise 1,  the query is missing a popularity column in the movie table.  It should be explicitly stated that the ranking should be based on the 'popularity' column if it exists, or specify an alternative metric (like revenue or rating) if 'popularity' is unavailable. 
- In Task 2 of Exercise 1,  the query uses `NTILE(4)` to divide into quartiles. The prompt asks for the 'Top 3',  which is not directly addressed by quartiles.  It would be better to use `RANK()` or `ROW_NUMBER()` to identify the top 3 explicitly.
- In Task 4 of Exercise 1, the query uses a CTE then aggregates; this is not the most efficient approach.  `FIRST_VALUE()` could be used directly within the final SELECT statement without a CTE.  Also, the `max(release_date)` is not needed. The task clearly specifies 'most recent' which is implicit in the 'order by movie.release_date DESC' clause used in the FIRST_VALUE() function, therefore, there is no need to use 'max()'.
- In Task 1 of Exercise 2, the query calculates the number of movies per actor, but it doesn't display the actor's name, only the ID. The query should select `person.person_name` to meet the requirements of the task.
- In Task 2 of Exercise 2, the `WHERE 0=0` condition is unnecessary and makes the query less readable. It should be removed.
- In Task 4 of Exercise 2, similar to Task 2, the `WHERE 0=0` condition is redundant and can be removed for improved readability.
- Consider adding aliases to table names for improved readability (e.g., `m` for `movies`, `mg` for `movie_genres`).
- In several queries, using explicit JOIN conditions (e.g., `ON movie.movie_id = mov_gen.movie_id`) instead of implicit joins would improve readability.  The implicit joins work but explicit ones are generally preferred for clarity.
Brief justification:
- correctness: The code generally addresses each task in the exercises, although there are issues with some of the implementations.  For instance, tasks involving top N results (top 3 movies or top director) use `NTILE` instead of ranking functions better suited for this purpose, and some queries miss critical aspects of the requirements (missing actor names, redundant conditions). The major issues are explained in the feedback section.  Therefore, a score of 90% reflects a mostly correct but not fully accurate solution. 
- readability: The code is mostly readable, but it could be improved by using aliases for tables, adding more comments in complex sections, and avoiding unnecessary conditions (like `WHERE 0 = 0`). The current formatting is okay, but standard practices could be incorporated for better readability and clarity. 
- performance: The performance could be improved in a few areas.  Some queries use CTEs where they're not entirely necessary (Task 4 of Exercise 1).  Additionally, using more efficient window function strategies (like avoiding `NTILE` for top N results) could lead to performance gains.  The use of unnecessary conditions also slightly impacts performance. 
- security: The code doesn't present any obvious security vulnerabilities.  It's purely focused on data retrieval and manipulation, which doesn't inherently pose security risks.  However, in a production environment, proper input sanitization and validation would be important to avoid SQL injection vulnerabilities if user input were involved. This code doesn't involve user input, hence the perfect score.

